(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{294:function(a,t,s){"use strict";s.r(t);var e=s(14),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"nohup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nohup"}},[a._v("#")]),a._v(" nohup")]),a._v(" "),t("p",[a._v("在后台运行命令，并忽略所有挂起（SIGHUP）信号，即使终端关闭或用户退出也不会中断该程序。")]),a._v(" "),t("h2",{attrs:{id:"jq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jq"}},[a._v("#")]),a._v(" jq")]),a._v(" "),t("p",[a._v("用于解析和处理 JSON 数据格式的工具。可以用来过滤、排序、转换等操作。")]),a._v(" "),t("h3",{attrs:{id:"ex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ex"}},[a._v("#")]),a._v(" ex:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("jq '.name' // 要查询name字段\njq '.people[] | .name' // 要查询所有people数组对象中的name字段\njq '.[].name' // 从JSON数据中选择所有对象，并输出它们的name字段\necho composer.json | xargs jq . // 按照文件格式输出\n")])])]),t("h2",{attrs:{id:"xargs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xargs"}},[a._v("#")]),a._v(" xargs")]),a._v(" "),t("p",[a._v("用于将标准输入转换为命令行参数的工具。通常与其他命令一起使用，以便处理大量文件或者数据。")]),a._v(" "),t("h2",{attrs:{id:"watch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[a._v("#")]),a._v(" watch")]),a._v(" "),t("p",[a._v("监视一个命令的输出并定期重新运行该命令。")]),a._v(" "),t("h3",{attrs:{id:"ex-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ex-2"}},[a._v("#")]),a._v(" ex:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-n seconds：指定执行命令的时间间隔，默认值为 2 秒。\n-d：高亮显示命令输出中变化的部分。\n-t：不显示标题。\n-h：显示帮助信息。\n")])])]),t("h2",{attrs:{id:"cut"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cut"}},[a._v("#")]),a._v(" cut")]),a._v(" "),t("p",[t("code",[a._v("cut -c 1-5")]),a._v(" 是一个命令行工具，用于从文件或输出的每一行中提取前五个字符。它从标准输入或作为参数指定的文件中读取输入，并将提取的字符打印到标准输出")]),a._v(" "),t("h3",{attrs:{id:"ex-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ex-3"}},[a._v("#")]),a._v(" ex:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("cut -f 1,2 data.txt // -f 选项用于指定要提取的字段或列。\ncut -d ',' -f 1,2 data.csv // -d 选项来指定其他分隔符。\ncut -f 3-5 data.txt // n-m 的方式指定要提取的字段或列范围。\ncut -f 4- data.txt // 提取文件中从第 4 列到最后一列的数据。\n-s：禁止输出不包含分隔符的行。\n--complement：补集选项，提取未指定的字段或列。\n")])])]),t("h2",{attrs:{id:"gzip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gzip"}},[a._v("#")]),a._v(" gzip")]),a._v(" "),t("p",[a._v("我可以展示一些使用gzip命令进行文件压缩和解压缩的例子。请告诉我您想要压缩或解压缩哪个文件，并指定相应的操作类型（压缩或解压缩）。")]),a._v(" "),t("p",[a._v("例如，如果您想要压缩一个名为example.txt的文本文件，可以使用以下命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("gzip example.txt\n")])])]),t("p",[a._v("这将创建一个名为example.txt.gz的压缩文件，并删除原始文件。如果您不想删除原始文件，可以使用"),t("code",[a._v("-k")]),a._v("选项来保留它：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("gzip -k example.txt\n")])])]),t("p",[a._v("如果您要解压缩一个名为example.txt.gz的压缩文件，可以使用以下命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("gunzip example.txt.gz\n")])])]),t("p",[a._v("这将创建一个名为example.txt的解压缩文件，并删除原始压缩文件。如果您要保留原始文件，可以使用"),t("code",[a._v("-k")]),a._v("选项：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("gunzip -k example.txt.gz\n")])])]),t("p",[a._v("如果您要同时压缩多个文件，可以将它们组合成一个tar归档文件，然后使用gzip进行压缩。例如，要将所有当前目录中的文本文件压缩到一个名为archive.tar.gz的压缩文件中，请使用以下命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("tar cvf - *.txt | gzip > archive.tar.gz\n")])])]),t("p",[a._v("这将创建一个名为archive.tar.gz的压缩文件，其中包含所有当前目录中的文本文件。")]),a._v(" "),t("h2",{attrs:{id:"tee"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tee"}},[a._v("#")]),a._v(" tee")]),a._v(" "),t("p",[a._v("tee -a 是一个在Unix/Linux操作系统中使用的命令，它允许将命令的输出同时显示在屏幕上并追加到文件中。 -a选项表示输出应该追加到文件末尾，而不是覆盖它。")]),a._v(" "),t("p",[a._v("例如，如果运行命令 "),t("code",[a._v("ls | tee -a file.txt")]),a._v("，它将在屏幕上显示文件和目录列表，并将输出附加到名为“file.txt”的文件末尾。如果文件不存在，它将被创建。")]),a._v(" "),t("h2",{attrs:{id:"tr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tr"}},[a._v("#")]),a._v(" tr")]),a._v(" "),t("p",[a._v("tr 是一个Unix命令行实用程序，可以转换或删除字符。")]),a._v(" "),t("h3",{attrs:{id:"ex-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ex-4"}},[a._v("#")]),a._v(" ex:")]),a._v(" "),t("p",[a._v("用法：tr [选项]…SET1 [SET2]\n从标准输入中转换、压缩和/或删除字符，写入到标准输出中。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("-c, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--complement")]),a._v("        使用 SET1 的补集\n-C, --no-verify-complement    不要验证 SET1 是否有效\n-d, "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--delete")]),a._v("            删除 SET1 中的字符，不进行转换。\n-s, --squeeze-repeats   将在 SET1 中被列出的每个重复字符的输入序列替换为该字符的一个单一出现。\n-t, --truncate-set1     首先将 SET1 截断为 SET2 的长度\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--help")]),a._v("     显示此帮助信息并退出\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--version")]),a._v("  输出版本信息并退出\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#- 删除")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'o'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#- 替换")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'o'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'b'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#- 要从文件中删除所有空格，可以使用以下命令：")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("' '")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" file.txt"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" newfile.txt"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#- 要将大写字符转换为小写字符：")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"HELLO"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'[:upper:]'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'[:lower:]'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("tr 和 sed 是在 Linux 系统中常用的文本处理工具，它们的作用虽然有一定重叠，但是有些不同之处。")]),a._v(" "),t("p",[a._v("tr (translate) 命令用于对输入的字符进行简单的替换、删除和压缩等操作。tr 命令可以将一个字符集映射成另一个字符集，也可以删除指定的字符或者重复的字符并进行压缩。例如，可以使用 tr 'a-z' 'A-Z' 把小写字母转换为大写字母；或者使用 tr -d '\\r' 删除 Windows 平台下的回车符。")]),a._v(" "),t("p",[a._v("sed (stream editor) 命令则是一款强大的流编辑器，可以实现更复杂的文本处理操作。sed 命令支持的功能包括替换、删除、添加和查找等。与 tr 命令不同的是，sed 通常以行为单位处理文本数据。通过使用正则表达式来匹配和操作文本，可以在文本文件中进行高级搜索和替换操作。例如，可以使用 sed 's/old/new/g' 将所有出现的 old 替换为 new。")]),a._v(" "),t("p",[a._v("总体来说，tr 命令适合进行简单的字符替换和压缩等文本处理任务，而 sed 命令则更适合用于复杂的文本处理任务，例如搜索和替换、删除指定行等。")])]),a._v(" "),t("h1",{attrs:{id:"mapfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapfile"}},[a._v("#")]),a._v(" mapfile")]),a._v(" "),t("p",[a._v("mapfile 是 Bash 的一个内置命令，用于将输入数据按行读取到数组中。其语法如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("mapfile [-d delimiter] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C command] [-c quantum] [array]\n\n其中，常用的参数包括：\n\n-d: 指定输入分隔符。\n-t: 去除每个行末的换行符。\n-s: 跳过指定数量的行。 \n-n: 读取指定数量的行。\narray: 指定要存储输入数据的数组名。 \n")])])]),t("h3",{attrs:{id:"ex-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ex-5"}},[a._v("#")]),a._v(" EX:")]),a._v(" "),t("p",[a._v("1、例如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("mapfile -t my_array < input.txt\n")])])]),t("p",[a._v("将把文件 input.txt 的每一行读入数组 my_array 中，并去除每个行末的换行符。")]),a._v(" "),t("p",[a._v("2、读取 "),t("code",[a._v(".env")]),a._v(" 文件并")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#读取第二行")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("mapfile")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" .env "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 读取全部")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("mapfile")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" .env "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);